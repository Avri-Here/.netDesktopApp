using System.Windows;
using System.IO;
using System.Threading.Tasks;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;






namespace ImageConverterApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        public List<string> FilterImageFiles(string[] files)
        {
            string[] allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff" };
            return files.Where(file => allowedExtensions.Contains(Path.GetExtension(file).ToLower())).ToList();
        }


        private async void Window_Drop(object sender, DragEventArgs e)
        {

            Console.WriteLine("Drop event triggered");
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                string[] allFilesFromDragEvent = (string[])e.Data.GetData(DataFormats.FileDrop);
                Console.WriteLine($"All Files dropped : {string.Join(", ", allFilesFromDragEvent)}");
                List<string> imageFiles = FilterImageFiles(allFilesFromDragEvent);
                Console.WriteLine("Filtered image files :");
                imageFiles.ForEach(Console.WriteLine);

                foreach (string file in imageFiles)
                {

                    Console.WriteLine($"Converting {file} to JPG ..");
                    await ConvertToJpg(file);
                }
            }
        }


        private Task ConvertToJpg(string inputFile)
        {
            return Task.Run(() =>
            {
                string outputDirectory = Path.Combine(Path.GetDirectoryName(inputFile), "output");
                Directory.CreateDirectory(outputDirectory); // Ensure the output directory exists

                string outputFile = Path.Combine(outputDirectory, Path.GetFileNameWithoutExtension(inputFile) + ".jpg");
                Console.WriteLine($"outputFile :  {outputFile} ");

                string arguments = $"-i \"{inputFile}\" \"{outputFile}\"";

                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = " ffmpeg",
                    Arguments = arguments,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (Process process = new Process())
                {
                    process.StartInfo = startInfo;
                    process.OutputDataReceived += (sender, e) => Console.WriteLine(e.Data);
                    process.ErrorDataReceived += (sender, e) => Console.WriteLine(e.Data);

                    process.Start();
                    process.BeginOutputReadLine();
                    process.BeginErrorReadLine();
                    process.WaitForExit();
                }

                Console.WriteLine($"Conversion finished for {inputFile} !");

            });
        }
    }
}
